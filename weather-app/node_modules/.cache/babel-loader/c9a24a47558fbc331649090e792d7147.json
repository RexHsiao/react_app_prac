{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\nconst BASE_URL = 'https://www.metaweather.com/api/location';\nconst CROSS_DOMAIN = 'https://the-ultimate-api-challenge.herokuapp.com';\nconst REQUEST_URL = `${CROSS_DOMAIN}/${BASE_URL}`;\n\nconst UseForecast = () => {\n  _s();\n\n  const [isError, setError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [forecast, setForecast] = useState(false);\n\n  const getWoeid = async location => {\n    const {\n      data\n    } = await axios(`${REQUEST_URL}/search`, {\n      params: {\n        query: location\n      }\n    });\n\n    if (!data || data.length === 0) {\n      setError('There is no such location');\n      return;\n    }\n\n    return data;\n  };\n\n  const getForecastData = async woeid => {\n    const {\n      data\n    } = await axios(`${REQUEST_URL}/${woeid}`);\n\n    if (!data || data.length === 0) {\n      setError('Something went wrong');\n      return;\n    }\n\n    return data;\n  }; // call the API\n\n\n  const submitRequest = async location => {\n    setLoading(true);\n    setError(false);\n    const response = await getWoeid(location);\n    const data = await getForecastData(response[0].woeid);\n    console.log({\n      data\n    });\n  };\n\n  return {\n    isError,\n    isLoading,\n    forecast,\n    submitRequest\n  };\n};\n\n_s(UseForecast, \"G2/Zf1Lr/Kc8rIpG811DQhxoaFY=\");\n\n_c = UseForecast;\nexport default UseForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseForecast\");","map":{"version":3,"sources":["/Users/yu-chenhsiao/Desktop/2022AU/weather_app_prac/weather-app/src/Hooks/UseForecast.js"],"names":["useState","axios","BASE_URL","CROSS_DOMAIN","REQUEST_URL","UseForecast","isError","setError","isLoading","setLoading","forecast","setForecast","getWoeid","location","data","params","query","length","getForecastData","woeid","submitRequest","response","console","log"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAG,0CAAjB;AACA,MAAMC,YAAY,GAAG,kDAArB;AACA,MAAMC,WAAW,GAAI,GAAED,YAAa,IAAGD,QAAS,EAAhD;;AAEA,MAAMG,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,QAAV,IAAsBP,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACQ,SAAD,EAAYC,UAAZ,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMY,QAAQ,GAAG,MAAOC,QAAP,IAAoB;AACjC,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAAE,GAAEG,WAAY,SAAhB,EAA0B;AAACW,MAAAA,MAAM,EAAE;AAACC,QAAAA,KAAK,EAAEH;AAAR;AAAT,KAA1B,CAA5B;;AAEA,QAAI,CAACC,IAAD,IAASA,IAAI,CAACG,MAAL,KAAgB,CAA7B,EAAgC;AAC5BV,MAAAA,QAAQ,CAAC,2BAAD,CAAR;AACA;AACH;;AAED,WAAOO,IAAP;AACH,GATD;;AAWA,QAAMI,eAAe,GAAG,MAAOC,KAAP,IAAiB;AACrC,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAAE,GAAEG,WAAY,IAAGe,KAAM,EAAzB,CAA5B;;AACA,QAAI,CAACL,IAAD,IAASA,IAAI,CAACG,MAAL,KAAgB,CAA7B,EAAgC;AAC5BV,MAAAA,QAAQ,CAAC,sBAAD,CAAR;AACA;AACH;;AACD,WAAOO,IAAP;AACH,GAPD,CAhBsB,CAyBtB;;;AACA,QAAMM,aAAa,GAAG,MAAMP,QAAN,IAAkB;AACpCJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACA,UAAMc,QAAQ,GAAG,MAAMT,QAAQ,CAACC,QAAD,CAA/B;AACA,UAAMC,IAAI,GAAG,MAAMI,eAAe,CAACG,QAAQ,CAAC,CAAD,CAAR,CAAYF,KAAb,CAAlC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACT,MAAAA;AAAD,KAAZ;AACH,GAND;;AAQA,SAAO;AACHR,IAAAA,OADG;AACME,IAAAA,SADN;AACiBE,IAAAA,QADjB;AAC2BU,IAAAA;AAD3B,GAAP;AAGH,CArCD;;GAAMf,W;;KAAAA,W;AAuCN,eAAeA,WAAf","sourcesContent":["import {useState} from 'react';\nimport axios from 'axios';\n\nconst BASE_URL = 'https://www.metaweather.com/api/location';\nconst CROSS_DOMAIN = 'https://the-ultimate-api-challenge.herokuapp.com';\nconst REQUEST_URL = `${CROSS_DOMAIN}/${BASE_URL}`\n\nconst UseForecast = () => {\n    const [isError, setError] = useState(false);\n    const [isLoading, setLoading] = useState(false);\n    const [forecast, setForecast] = useState(false);\n\n    const getWoeid = async (location) => {\n        const { data } = await axios(`${REQUEST_URL}/search`, {params: {query: location}});\n\n        if (!data || data.length === 0) {\n            setError('There is no such location');\n            return;\n        }\n\n        return data;\n    }\n\n    const getForecastData = async (woeid) => {\n        const { data } = await axios(`${REQUEST_URL}/${woeid}`);\n        if (!data || data.length === 0) {\n            setError('Something went wrong');\n            return;\n        }\n        return data;\n    }\n\n    // call the API\n    const submitRequest = async location => {\n        setLoading(true);\n        setError(false);\n        const response = await getWoeid(location);\n        const data = await getForecastData(response[0].woeid);\n        console.log({data});\n    };\n\n    return {\n        isError, isLoading, forecast, submitRequest\n    }\n}\n\nexport default UseForecast;"]},"metadata":{},"sourceType":"module"}